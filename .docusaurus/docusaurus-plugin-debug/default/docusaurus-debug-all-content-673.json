{
  "docusaurus-plugin-content-docs": {
    "default": {
      "loadedVersions": [
        {
          "versionName": "current",
          "label": "Next",
          "banner": null,
          "badge": false,
          "noIndex": false,
          "className": "docs-version-current",
          "path": "/docs",
          "tagsPath": "/docs/tags",
          "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs",
          "editUrlLocalized": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/i18n/en/docusaurus-plugin-content-docs/current",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "/Users/youcef/Projects/esiee/react-native-course-esiee/sidebars.js",
          "contentPath": "/Users/youcef/Projects/esiee/react-native-course-esiee/docs",
          "contentPathLocalized": "/Users/youcef/Projects/esiee/react-native-course-esiee/i18n/en/docusaurus-plugin-content-docs/current",
          "docs": [
            {
              "unversionedId": "components/basic-components",
              "id": "components/basic-components",
              "title": "Basic React Native Components",
              "description": "If you're already familiar with React then you've got a head start, lucky you! Before we dive into React Native, let's start by looking at this \"hello world\" React component:",
              "source": "@site/docs/components/basic-components.mdx",
              "sourceDirName": "components",
              "slug": "/components/basic-components",
              "permalink": "/docs/components/basic-components",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/basic-components.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "title": "Basic React Native Components",
                "section": "Components",
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Components",
                "permalink": "/docs/category/components"
              },
              "next": {
                "title": "Styling",
                "permalink": "/docs/components/styling"
              }
            },
            {
              "unversionedId": "components/components",
              "id": "components/components",
              "title": "Components",
              "description": "React (Native) is a component-based framework. This means that your app is made from lots of components that are nested within each other. You always have one root component (in our case it is our App component), but inside it we can have as many big or small components as we'd like.",
              "source": "@site/docs/components/components.mdx",
              "sourceDirName": "components",
              "slug": "/components/",
              "permalink": "/docs/components/",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/components.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "title": "Components",
                "section": "Components",
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Styling",
                "permalink": "/docs/components/styling"
              },
              "next": {
                "title": "Image",
                "permalink": "/docs/components/image"
              }
            },
            {
              "unversionedId": "components/image",
              "id": "components/image",
              "title": "Image",
              "description": "Image is used to render images. Images may either be downloaded from the web, or imported as files, which are then bundled with the app.",
              "source": "@site/docs/components/image.mdx",
              "sourceDirName": "components",
              "slug": "/components/image",
              "permalink": "/docs/components/image",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/image.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 4,
              "frontMatter": {
                "title": "Image",
                "section": "Components",
                "sidebar_position": 4
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Components",
                "permalink": "/docs/components/"
              },
              "next": {
                "title": "Lists",
                "permalink": "/docs/components/lists"
              }
            },
            {
              "unversionedId": "components/lists",
              "id": "components/lists",
              "title": "Lists",
              "description": "What if instead of 4 colors, we had 10 or even 100? How would we display them then? If you're already familiar with React, you might be tempted to add all the colors in an array and .map over them. This is a very common mistake for newcomers to React Native. While it may be fine to do on the web, in React Native you should avoid using map in the render. This is because mapping over an array is not optimized. React Native will attempt to render every single element in the array all at once, regardless of whether they are visible on the screen or not.",
              "source": "@site/docs/components/lists.mdx",
              "sourceDirName": "components",
              "slug": "/components/lists",
              "permalink": "/docs/components/lists",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/lists.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 5,
              "frontMatter": {
                "title": "Lists",
                "section": "Components",
                "sidebar_position": 5
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Image",
                "permalink": "/docs/components/image"
              },
              "next": {
                "title": "Navigation",
                "permalink": "/docs/category/navigation"
              }
            },
            {
              "unversionedId": "components/styling",
              "id": "components/styling",
              "title": "Styling",
              "description": "In React Native, all styling is done using inline styles. We use a StyleSheet from react-native to create the styles. Usually we add this styles constant at the bottom of the file, or in a separate file:",
              "source": "@site/docs/components/styling.mdx",
              "sourceDirName": "components",
              "slug": "/components/styling",
              "permalink": "/docs/components/styling",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/styling.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "title": "Styling",
                "section": "Components",
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Basic React Native Components",
                "permalink": "/docs/components/basic-components"
              },
              "next": {
                "title": "Components",
                "permalink": "/docs/components/"
              }
            },
            {
              "unversionedId": "context/context",
              "id": "context/context",
              "title": "React Context",
              "description": "Sharing State Between Components",
              "source": "@site/docs/context/context.mdx",
              "sourceDirName": "context",
              "slug": "/context/",
              "permalink": "/docs/context/",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/context/context.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "title": "React Context",
                "section": "Context",
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Context",
                "permalink": "/docs/category/context"
              },
              "next": {
                "title": "Persisting Data & Async Storage",
                "permalink": "/docs/context/storage"
              }
            },
            {
              "unversionedId": "context/storage",
              "id": "context/storage",
              "title": "Persisting Data & Async Storage",
              "description": "The Need for Data Persistence",
              "source": "@site/docs/context/storage.mdx",
              "sourceDirName": "context",
              "slug": "/context/storage",
              "permalink": "/docs/context/storage",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/context/storage.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "title": "Persisting Data & Async Storage",
                "section": "Context",
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "React Context",
                "permalink": "/docs/context/"
              }
            },
            {
              "unversionedId": "forms/basic-form-components",
              "id": "forms/basic-form-components",
              "title": "Basic form components",
              "description": "Introduction to Basic Form Components",
              "source": "@site/docs/forms/basic-form-components.mdx",
              "sourceDirName": "forms",
              "slug": "/forms/basic-form-components",
              "permalink": "/docs/forms/basic-form-components",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/forms/basic-form-components.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "title": "Basic form components",
                "section": "Forms",
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Forms Intro",
                "permalink": "/docs/forms/forms-intro"
              },
              "next": {
                "title": "Handle user input",
                "permalink": "/docs/forms/handle-user-input"
              }
            },
            {
              "unversionedId": "forms/forms-intro",
              "id": "forms/forms-intro",
              "title": "Forms Intro",
              "description": "Understanding the Need for Forms in Mobile Apps",
              "source": "@site/docs/forms/forms-intro.mdx",
              "sourceDirName": "forms",
              "slug": "/forms/forms-intro",
              "permalink": "/docs/forms/forms-intro",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/forms/forms-intro.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "title": "Forms Intro",
                "section": "Forms",
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Forms",
                "permalink": "/docs/category/forms"
              },
              "next": {
                "title": "Basic form components",
                "permalink": "/docs/forms/basic-form-components"
              }
            },
            {
              "unversionedId": "forms/handle-user-input",
              "id": "forms/handle-user-input",
              "title": "Handle user input",
              "description": "Introduction to User Input and Form State Management",
              "source": "@site/docs/forms/handle-user-input.mdx",
              "sourceDirName": "forms",
              "slug": "/forms/handle-user-input",
              "permalink": "/docs/forms/handle-user-input",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/forms/handle-user-input.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "title": "Handle user input",
                "section": "Forms",
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Basic form components",
                "permalink": "/docs/forms/basic-form-components"
              },
              "next": {
                "title": "Context",
                "permalink": "/docs/category/context"
              }
            },
            {
              "unversionedId": "hooks/go-further",
              "id": "hooks/go-further",
              "title": "Go further",
              "description": "Official guide on Hooks",
              "source": "@site/docs/hooks/go-further.mdx",
              "sourceDirName": "hooks",
              "slug": "/hooks/go-further",
              "permalink": "/docs/hooks/go-further",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/hooks/go-further.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 4,
              "frontMatter": {
                "title": "Go further",
                "section": "Hooks",
                "sidebar_position": 4
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "useEffect",
                "permalink": "/docs/hooks/use-effect"
              },
              "next": {
                "title": "Forms",
                "permalink": "/docs/category/forms"
              }
            },
            {
              "unversionedId": "hooks/hooks-intro",
              "id": "hooks/hooks-intro",
              "title": "Hooks intro",
              "description": "Introduction to React Hooks",
              "source": "@site/docs/hooks/hooks-intro.mdx",
              "sourceDirName": "hooks",
              "slug": "/hooks/hooks-intro",
              "permalink": "/docs/hooks/hooks-intro",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/hooks/hooks-intro.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "title": "Hooks intro",
                "section": "Hooks",
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Hooks",
                "permalink": "/docs/category/hooks"
              },
              "next": {
                "title": "useState",
                "permalink": "/docs/hooks/use-state"
              }
            },
            {
              "unversionedId": "hooks/use-effect",
              "id": "hooks/use-effect",
              "title": "useEffect",
              "description": "Introduction to useEffect",
              "source": "@site/docs/hooks/use-effect.mdx",
              "sourceDirName": "hooks",
              "slug": "/hooks/use-effect",
              "permalink": "/docs/hooks/use-effect",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/hooks/use-effect.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "title": "useEffect",
                "section": "Hooks",
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "useState",
                "permalink": "/docs/hooks/use-state"
              },
              "next": {
                "title": "Go further",
                "permalink": "/docs/hooks/go-further"
              }
            },
            {
              "unversionedId": "hooks/use-state",
              "id": "hooks/use-state",
              "title": "useState",
              "description": "---",
              "source": "@site/docs/hooks/use-state.mdx",
              "sourceDirName": "hooks",
              "slug": "/hooks/use-state",
              "permalink": "/docs/hooks/use-state",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/hooks/use-state.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "title": "useState",
                "section": "Hooks",
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Hooks intro",
                "permalink": "/docs/hooks/hooks-intro"
              },
              "next": {
                "title": "useEffect",
                "permalink": "/docs/hooks/use-effect"
              }
            },
            {
              "unversionedId": "Introduction/about-javascript",
              "id": "Introduction/about-javascript",
              "title": "About JavaScript",
              "description": "Let's see what's so special about JavaScript, what we can achieve with it, and what other technologies play well with it.",
              "source": "@site/docs/Introduction/about-javascript.mdx",
              "sourceDirName": "Introduction",
              "slug": "/Introduction/about-javascript",
              "permalink": "/docs/Introduction/about-javascript",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Introduction/about-javascript.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "title": "About JavaScript",
                "section": "Introduction",
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "About React Native",
                "permalink": "/docs/Introduction/about-react-native"
              },
              "next": {
                "title": "What is Expo?",
                "permalink": "/docs/Introduction/expo"
              }
            },
            {
              "unversionedId": "Introduction/about-react-native",
              "id": "Introduction/about-react-native",
              "title": "About React Native",
              "description": "Android vs iOS",
              "source": "@site/docs/Introduction/about-react-native.mdx",
              "sourceDirName": "Introduction",
              "slug": "/Introduction/about-react-native",
              "permalink": "/docs/Introduction/about-react-native",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Introduction/about-react-native.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "title": "About React Native",
                "section": "Introduction",
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Introduction",
                "permalink": "/docs/category/introduction"
              },
              "next": {
                "title": "About JavaScript",
                "permalink": "/docs/Introduction/about-javascript"
              }
            },
            {
              "unversionedId": "Introduction/expo",
              "id": "Introduction/expo",
              "title": "What is Expo?",
              "description": "Expo is a suite of tools for React Native that improves the developer experience.",
              "source": "@site/docs/Introduction/expo.mdx",
              "sourceDirName": "Introduction",
              "slug": "/Introduction/expo",
              "permalink": "/docs/Introduction/expo",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Introduction/expo.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "title": "What is Expo?",
                "section": "Introduction",
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "About JavaScript",
                "permalink": "/docs/Introduction/about-javascript"
              },
              "next": {
                "title": "Setup",
                "permalink": "/docs/category/setup"
              }
            },
            {
              "unversionedId": "navigation/add-navigation",
              "id": "navigation/add-navigation",
              "title": "Adding navigation",
              "description": "Install React Navigation dependencies",
              "source": "@site/docs/navigation/add-navigation.mdx",
              "sourceDirName": "navigation",
              "slug": "/navigation/add-navigation",
              "permalink": "/docs/navigation/add-navigation",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/navigation/add-navigation.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "title": "Adding navigation",
                "section": "Navigation",
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Navigation Intro",
                "permalink": "/docs/navigation/navigation-intro"
              },
              "next": {
                "title": "Navigation guides",
                "permalink": "/docs/navigation/navigation-guides"
              }
            },
            {
              "unversionedId": "navigation/navigation-guides",
              "id": "navigation/navigation-guides",
              "title": "Navigation guides",
              "description": "Moving between screens",
              "source": "@site/docs/navigation/navigation-guides.mdx",
              "sourceDirName": "navigation",
              "slug": "/navigation/navigation-guides",
              "permalink": "/docs/navigation/navigation-guides",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/navigation/navigation-guides.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "title": "Navigation guides",
                "section": "Navigation",
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Adding navigation",
                "permalink": "/docs/navigation/add-navigation"
              },
              "next": {
                "title": "Hooks",
                "permalink": "/docs/category/hooks"
              }
            },
            {
              "unversionedId": "navigation/navigation-intro",
              "id": "navigation/navigation-intro",
              "title": "Navigation Intro",
              "description": "Now it's time to add navigation to our app. Let's start with adding a new page where we could list multiple color schemes as a list, and then navigate to a new page to view their details.",
              "source": "@site/docs/navigation/navigation-intro.mdx",
              "sourceDirName": "navigation",
              "slug": "/navigation/navigation-intro",
              "permalink": "/docs/navigation/navigation-intro",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/navigation/navigation-intro.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "title": "Navigation Intro",
                "section": "Navigation",
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Navigation",
                "permalink": "/docs/category/navigation"
              },
              "next": {
                "title": "Adding navigation",
                "permalink": "/docs/navigation/add-navigation"
              }
            },
            {
              "unversionedId": "setup/debugging",
              "id": "setup/debugging",
              "title": "Debugging",
              "description": "As developers, we spend a whole lot of time debugging, especially when learning something new. Let's look at some debugging tips for React Native.",
              "source": "@site/docs/setup/debugging.mdx",
              "sourceDirName": "setup",
              "slug": "/setup/debugging",
              "permalink": "/docs/setup/debugging",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/setup/debugging.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 4,
              "frontMatter": {
                "title": "Debugging",
                "section": "Setup",
                "sidebar_position": 4
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Install Linter",
                "permalink": "/docs/setup/linter"
              },
              "next": {
                "title": "Components",
                "permalink": "/docs/category/components"
              }
            },
            {
              "unversionedId": "setup/getting-started",
              "id": "setup/getting-started",
              "title": "Getting Started",
              "description": "The fastest way to get started with React Native is to us Expo and run the app on your device. Feel free to use the React Native docs or Expo docs for reference.",
              "source": "@site/docs/setup/getting-started.mdx",
              "sourceDirName": "setup",
              "slug": "/setup/getting-started",
              "permalink": "/docs/setup/getting-started",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/setup/getting-started.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "title": "Getting Started",
                "section": "Setup",
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Setup",
                "permalink": "/docs/category/setup"
              },
              "next": {
                "title": "Install Linter",
                "permalink": "/docs/setup/linter"
              }
            },
            {
              "unversionedId": "setup/linter",
              "id": "setup/linter",
              "title": "Install Linter",
              "description": "Although not mandatory, it is highly recommended to add a linter to your React Native project. Doing so not only helps to ensure a consistent code style throughout the project, but it also identifies errors and uncovers bad practices. Whether it's a personal or hobby project, I always set up linting and code formatting from the beginning when starting a new project.",
              "source": "@site/docs/setup/linter.mdx",
              "sourceDirName": "setup",
              "slug": "/setup/linter",
              "permalink": "/docs/setup/linter",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/setup/linter.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "title": "Install Linter",
                "section": "Setup",
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Getting Started",
                "permalink": "/docs/setup/getting-started"
              },
              "next": {
                "title": "Debugging",
                "permalink": "/docs/setup/debugging"
              }
            },
            {
              "unversionedId": "welcome",
              "id": "welcome",
              "title": "Welcome",
              "description": "Hi there, and welcome to React Native! 👋",
              "source": "@site/docs/welcome.mdx",
              "sourceDirName": ".",
              "slug": "/welcome",
              "permalink": "/docs/welcome",
              "draft": false,
              "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/welcome.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "title": "Welcome",
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "next": {
                "title": "Introduction",
                "permalink": "/docs/category/introduction"
              }
            }
          ],
          "drafts": [],
          "sidebars": {
            "tutorialSidebar": [
              {
                "type": "doc",
                "id": "welcome"
              },
              {
                "type": "category",
                "label": "Introduction",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "Introduction/about-react-native"
                  },
                  {
                    "type": "doc",
                    "id": "Introduction/about-javascript"
                  },
                  {
                    "type": "doc",
                    "id": "Introduction/expo"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Introduction to React Native",
                  "slug": "/category/introduction",
                  "permalink": "/docs/category/introduction"
                }
              },
              {
                "type": "category",
                "label": "Setup",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "setup/getting-started"
                  },
                  {
                    "type": "doc",
                    "id": "setup/linter"
                  },
                  {
                    "type": "doc",
                    "id": "setup/debugging"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Setup development environment",
                  "slug": "/category/setup",
                  "permalink": "/docs/category/setup"
                }
              },
              {
                "type": "category",
                "label": "Components",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "components/basic-components"
                  },
                  {
                    "type": "doc",
                    "id": "components/styling"
                  },
                  {
                    "type": "doc",
                    "id": "components/components"
                  },
                  {
                    "type": "doc",
                    "id": "components/image"
                  },
                  {
                    "type": "doc",
                    "id": "components/lists"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Basic components",
                  "slug": "/category/components",
                  "permalink": "/docs/category/components"
                }
              },
              {
                "type": "category",
                "label": "Navigation",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "navigation/navigation-intro"
                  },
                  {
                    "type": "doc",
                    "id": "navigation/add-navigation"
                  },
                  {
                    "type": "doc",
                    "id": "navigation/navigation-guides"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Navigation",
                  "slug": "/category/navigation",
                  "permalink": "/docs/category/navigation"
                }
              },
              {
                "type": "category",
                "label": "Hooks",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "hooks/hooks-intro"
                  },
                  {
                    "type": "doc",
                    "id": "hooks/use-state"
                  },
                  {
                    "type": "doc",
                    "id": "hooks/use-effect"
                  },
                  {
                    "type": "doc",
                    "id": "hooks/go-further"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Hooks",
                  "slug": "/category/hooks",
                  "permalink": "/docs/category/hooks"
                }
              },
              {
                "type": "category",
                "label": "Forms",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "forms/forms-intro"
                  },
                  {
                    "type": "doc",
                    "id": "forms/basic-form-components"
                  },
                  {
                    "type": "doc",
                    "id": "forms/handle-user-input"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Forms",
                  "slug": "/category/forms",
                  "permalink": "/docs/category/forms"
                }
              },
              {
                "type": "category",
                "label": "Context",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "context/context"
                  },
                  {
                    "type": "doc",
                    "id": "context/storage"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Context",
                  "slug": "/category/context",
                  "permalink": "/docs/category/context"
                }
              }
            ]
          }
        }
      ]
    }
  },
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [
        {
          "id": "td-4",
          "metadata": {
            "permalink": "/blog/td-4",
            "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-05-24-TD4.mdx",
            "source": "@site/blog/2023-05-24-TD4.mdx",
            "title": "TD n°4 - Forms & Context",
            "description": "Setup",
            "date": "2023-05-24T00:00:00.000Z",
            "formattedDate": "May 24, 2023",
            "tags": [],
            "readingTime": 1.48,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Youcef",
                "title": "Professeur",
                "url": "https://www.linkedin.com/in/youcefacheuk/",
                "imageURL": "https://media.licdn.com/dms/image/D4E03AQEsoGJhPBw2lg/profile-displayphoto-shrink_400_400/0/1673963094102?e=1686787200&v=beta&t=GPsLkfpeqiYFDDMVGbg7gjSazqhEA9oELnHJjvYdkjw",
                "key": "youcef"
              }
            ],
            "frontMatter": {
              "slug": "td-4",
              "title": "TD n°4 - Forms & Context",
              "authors": [
                "youcef"
              ]
            },
            "nextItem": {
              "title": "Project",
              "permalink": "/blog/project"
            }
          },
          "content": "### Setup\n\n1. Create a new Expo project\n2. Install eslint and prettier\n3. Run the app on your phone\n4. Try to run your app on a simulator\n\n### Exercise 1 : Forms and Validation\nObjective: To understand and implement forms with validation in React Native with Expo. You'll be creating a form with several fields and their respective validations.\n\nRequirements: Familiarity with JavaScript, React Native, Expo, and basic understanding of form handling and validation in React.\n\nTask\nCreate a React Native application with Expo. The application should contain a form with the following fields:\n\n- Name - Text input (required, should contain only characters)\n- Date of Birth - Date picker (required, should not be a future date)\n- Age - This field should be automatically calculated based on the Date of Birth input - Should be a text or a disabled input\n- Number of Pets - A number input field (should contain only digits) - Optional\n- I'm a great React Native developer (Yes/No) - Implement this using a Switch component\n- I understand the rules of the project and I'll do my best - Implement this using a Checkbox component - This should be checked before the form can be submitted\n\nAdd a button at the bottom of the screen. The button should be disabled if the required information is not provided.\n\nOn submit, the info should be displayed through an ```Alert``` component.\n\n### Exercise 2 : Context\n\nYou will add a feature to persist the form data in local storage and pre-fill the form fields when the application is opened again.\n\nCreate a new screen called ```DetailsScreen```. On submit of the form, you should navigate to this new screen and, without passing route parameters, display the info of the form."
        },
        {
          "id": "project",
          "metadata": {
            "permalink": "/blog/project",
            "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-05-23-Project.mdx",
            "source": "@site/blog/2023-05-23-Project.mdx",
            "title": "Project",
            "description": "We're going to be building a Calories Counter and Meal Planner application using React Native and Expo. This application will allow users to set their health goals, choose items from a food database to track caloric intake, and plan meals accordingly. As we work through this project, we'll be learning and applying key concepts we saw during the course, including user input handling, API integration, state management, and UI styling. Let's dive right in.",
            "date": "2023-05-23T00:00:00.000Z",
            "formattedDate": "May 23, 2023",
            "tags": [],
            "readingTime": 12.07,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Youcef",
                "title": "Professeur",
                "url": "https://www.linkedin.com/in/youcefacheuk/",
                "imageURL": "https://media.licdn.com/dms/image/D4E03AQEsoGJhPBw2lg/profile-displayphoto-shrink_400_400/0/1673963094102?e=1686787200&v=beta&t=GPsLkfpeqiYFDDMVGbg7gjSazqhEA9oELnHJjvYdkjw",
                "key": "youcef"
              }
            ],
            "frontMatter": {
              "slug": "project",
              "title": "Project",
              "authors": [
                "youcef"
              ]
            },
            "prevItem": {
              "title": "TD n°4 - Forms & Context",
              "permalink": "/blog/td-4"
            },
            "nextItem": {
              "title": "TD n°3 - Navigation & Hooks",
              "permalink": "/blog/td-3"
            }
          },
          "content": "We're going to be building a Calories Counter and Meal Planner application using React Native and Expo. This application will allow users to set their health goals, choose items from a food database to track caloric intake, and plan meals accordingly. As we work through this project, we'll be learning and applying key concepts we saw during the course, including user input handling, API integration, state management, and UI styling. Let's dive right in.\n\n### Rules\n\nEach item is **mandatory**\n\n- Teams of 2 students\n- Use React Native AND Expo\n- The two students have to commit to the project repository\n\n### Module 1: Setting up the project\nOur first step in this journey is to set up our development environment and initiate our project. Here are the steps to follow:\n\n- Step 1: Create a New Expo Project\n- Step 2: Install eslint and prettier\n- Step 3: Install React Navigation\n- Step 4: Run the app on your phone using Expo Go\n\nAfter this we will create 3 tabs using a Bottom Tab Navigator\n- Tab 1: Health goals\n- Tab 2: Food database\n- Tab 3: Meal planning\n\n### Module 2 : Health goals\n\nIn this module, we will be implementing the functionality for users to set their health goals and receive a daily caloric intake suggestion based on these goals. The main objective of this module is to understand how to capture user inputs, handle state management in React Native, and apply basic mathematical models in software applications.\n\nHere's a step-by-step breakdown:\n\n#### Step 1: Creating a Form for User Input\nFirstly, we need to create a form where users can input their personal details and health goals. The form should include fields for:\n\n- Age\n- Gender\n- Height\n- Weight\n- Activity level (with options like sedentary, light exercise, moderate exercise, heavy exercise, extra active)\n- Health goal (with options like weight loss, weight maintenance, weight gain)\n\nYou can use the `TextInput` and `Picker` components from React Native for this.\n\n#### Step 2: Handling User Input\nOnce the form is set up, we need to handle user input. This involves setting up state variables for each input field using the `useState` hook and updating these variables as the user enters their data.\nAlso, you should add proper form validation (disable the button one of the fields is empty for example).\n\n#### Step 3: Calculating BMR Using the Harris-Benedict Equation\nThe next step is to calculate the user's Basal Metabolic Rate (BMR) using the Harris-Benedict equation. The equation is different for men and women:\n\nFor men: ```BMR = 88.362 + (13.397 * weight in kg) + (4.799 * height in cm) - (5.677 * age in years)```\n\nFor women: ```BMR = 447.593 + (9.247 * weight in kg) + (3.098 * height in cm) - (4.330 * age in years)```\n\nWe will need to create a function that takes the user's age, gender, height, and weight as input, and returns the BMR as output.\n\n#### Step 4: Adjusting BMR Based on Activity Level\nThe BMR needs to be adjusted based on the user's activity level to get the total amount of calories they need to maintain their current weight. The adjustment factors are as follows:\n\n- Sedentary (little or no exercise): ```BMR * 1.2```\n- Lightly active (light exercise/sports 1-3 days/week): ```BMR * 1.375```\n- Moderately active (moderate exercise/sports 3-5 days/week): ```BMR * 1.55```\n- Very active (hard exercise/sports 6-7 days a week): ```BMR * 1.725```\n- Super active (very hard exercise/physical job & exercise 2x/day): ```BMR * 1.9```\n\nWe need to add this calculation to the function created in the previous step.\n\n#### Step 5: Adjusting Caloric Intake Based on Health Goal\nFinally, the total caloric intake needs to be adjusted based on the user's health goal. If the user wants to lose weight, subtract 500 calories from the total. If the user wants to gain weight, add 500 calories to the total. If the user wants to maintain weight, the total caloric intake remains the same.\n\n#### Step 6: Displaying the Result to the User\nOnce the daily caloric intake has been calculated, it should be displayed to the user. we can create a new component to display the result, or they can display it in an existing component.\n\nAbsolutely! Welcome back, students. We've made great progress on our Calories Counter and Meal Planner application, having already set up our project and implemented the functionality for users to set their health goals. Now, it's time to move on to the next part of our application: the Food Database.\n\n### Module 3: Food Database\n\nIn this module, we're going to be creating a food database where users can search for foods and see their nutritional information. This will involve integrating with a nutrition API to get this information, and creating a user interface where users can search for foods and view their details. Let's dive into the steps.\n\n**Step 1: Choosing a Nutrition API**\n\nThere are several nutrition APIs available that provide detailed information about different foods, including their calorie content and other nutritional facts. Some examples include these: https://developer.edamam.com/food-database-api or https://www.nutritionix.com/business/api. You'll need to choose one of these APIs (or another of your choice), sign up to get an API key, and familiarize yourself with the API documentation to understand how to make requests.\n\n**Step 2: Creating the Search Interface**\n\nNext, you'll create a new screen in your application for the food database. This screen should include a search bar where users can enter the name of a food. You can use the `TextInput` component from React Native for this.\n\n**Step 3: Handling User Input**\n\nSet up a state variable for the search query and update this variable as the user types into the search bar. You can do this using the `useState` and `onChangeText` props.\n\n**Step 4: Fetching Data from the API**\n\nWhen the user submits their search, make a request to the nutrition API to get information about the food. You'll need to refer to your chosen API's documentation to know exactly how to structure this request, but typically it will involve sending a GET request to a specific endpoint, with the search query and your API key included as parameters.\n\n**Step 5: Displaying the Results**\n\nOnce you receive the response from the API, extract the relevant information and display it to the user. This could include the food's name, calorie content, and other nutritional facts. Ensure to handle any errors that might occur, such as the food not being found in the database.\n\n**Step 6: Selecting Food for Meal Planning**\n\nAfter displaying the search results, allow the user to select a food item to add to their meal plan. You will need to create some form of selection interface – this could be as simple as a \"Add to Meal Plan\" button next to each food item.\n\nOnce a food item is selected, prompt the user to specify which meal this food item should be added to (Breakfast, Lunch, Dinner, or Snack). You can create a modal or a new screen to handle this. Use the `Picker` component from React Native for the meal type selection.\n\n**Step 7: Updating the Meal Plan**\n\nUpon the user's confirmation, update the user's meal plan with the chosen food item. The meal plan could be an object in your application's state that stores an array of food items for each meal type. Here is an example structure:\n\n```javascript\n{\n  \"Breakfast\": [],\n  \"Lunch\": [],\n  \"Snack\": [],\n  \"Dinner\": []\n}\n```\n\nEach time a food item is added, push it to the appropriate array in this object.\n\nAbsolutely, let's move forward to our next module. Having set up our project, implemented health goals functionality, and created a food database, we're now ready to start implementing the meal planning functionality. \n\n### Module 4: Meal Planning\n\nIn this module, we'll develop the core feature of our application: the Meal Planner. This will allow users to plan their meals for the week and view a summary of the planned meals along with the total calories for each day. Let's get started!\n\n**Step 1: Creating the Meal Planner Interface**\n\nFirst, create a new screen in your application for the Meal Planner. This screen should include a view for each day of the week, and within each day, a section for each meal (Breakfast, Lunch, Dinner, Snack). You may use the `View` and `Text` components from React Native for this purpose.\n\n**Step 2: Displaying the Meal Plan**\n\nNext, you'll need to display the user's meal plan in the Meal Planner screen. Recall the meal plan object we created in the last module, which should look something like this:\n\n```javascript\n{\n  \"Breakfast\": [],\n  \"Lunch\": [],\n  \"Dinner\": [],\n  \"Snack\": []\n}\n```\n\nFor each day and each meal, list out the food items that the user has added to their meal plan. You might want to create a separate component for each meal that takes the array of food items as a prop and renders them in a list.\n\n**Step 3: Calculating Daily Calories**\n\nFor each day, calculate the total calories of all food items in the meal plan. This can be done by looping through the food items for each meal, summing up their calorie content, and displaying the total. \n\n**Step 4: Adding and Removing Food Items**\n\nGive the user the option to add more food items to their meal plan from the food database, or remove existing items. When the user chooses to add an item, redirect them to the food database search screen, and after they've selected a food item, add it to the appropriate meal. When the user chooses to remove an item, simply remove it from the meal plan object.\n\n**Step 5: Saving the Meal Plan**\n\nFinally, consider how you want to handle data persistence. When the user closes and reopens the app, their meal plan should be saved.\n\n### Grading grid\n\nHere is the grading grid for this project. Note that bonus points can be awarded for outstanding work or additional features (using an external library, outstanding styling, adding an icon or a splashcreen...). Please be creative :)\n\n| Criteria | Unsatisfactory | Satisfactory | Good | Excellent | Outstanding |\n| --- | --- | --- | --- | --- | --- |\n| **Project Setup & Code Organization (2 points)** | Project setup is incorrect and/or code is disorganized or unreadable. | Project setup is mostly correct and code is somewhat organized and readable. | Project setup is correct, code is organized, and most naming conventions are followed. | Project setup is correct and efficient, code is well-organized, and naming conventions are followed. | Project setup is correct and efficient, code is extremely well-organized, with clear, thoughtful naming conventions. |\n| **Implementation of Health Goals (5 points)** | The health goals functionality is missing or implemented incorrectly. | The health goals functionality is partially implemented, with some minor errors. | The health goals functionality is mostly implemented correctly and works as expected. | The health goals functionality is fully implemented, works as expected, and includes robust error checking. | The health goals functionality is fully implemented, works as expected, includes robust error checking, and demonstrates a deep understanding of the underlying concepts. |\n| **Implementation of Food Database (5 points)** | The food database functionality is missing or implemented incorrectly. | The food database functionality is partially implemented, with some minor errors. | The food database functionality is mostly implemented correctly and works as expected. | The food database functionality is fully implemented, works as expected, and includes robust error checking. | The food database functionality is fully implemented, works as expected, includes robust error checking, and demonstrates a deep understanding of the underlying concepts. |\n| **Implementation of Meal Planning (5 points)** | The meal planning functionality is missing or implemented incorrectly. | The meal planning functionality is partially implemented, with some minor errors. | The meal planning functionality is mostly implemented correctly and works as expected. | The meal planning functionality is fully implemented, works as expected, and includes robust error checking. | The meal planning functionality is fully implemented, works as expected, includes robust error checking, and demonstrates a deep understanding of the underlying concepts. |\n| **UI Design & Styling (3 points)** | The application's UI is poorly designed and/or styled. | The application's UI is somewhat well-designed and styled, with some minor issues. | The application's UI is well-designed and styled, and is mostly consistent across the application. | The application's UI is very well-designed and styled, and is consistent across the application. | The application's UI is exceptionally well-designed and styled, demonstrating a high level of creativity and attention to detail, and is consistent across the application. |\n| **Overall Functionality** | The application has many bugs or is non-functional. | The application has some minor bugs, but is mostly functional. | The application is functional and behaves mostly as expected. | The application is fully functional, behaves as expected, and includes robust error checking. | The application is fully functional, behaves as expected, includes robust error checking, and demonstrates a deep understanding of the underlying concepts. |\n\n\n### Deliverables\n\n- **Project Setup and Code Repository**: Students should deliver a properly setup project with a GitHub repository. The repository should contain clear, well-organized code and a README file describing **your team**, the project, how to set it up, and how to use it. **Important**: I need to see the two teammates git users committing to the project, otherwise you'll face a penalty of **5 points**\n- **Documentation**: Objective, application's architecture, succeded features, unsucceded features, roadmap and screenshots, and the difficulties you faced while developing it. \n- **Demo**: Students should prepare a video presentation showcasing their application and all the requested features. **You face a penalty of 5 points if the demo is not included**.\n\nPlease put the documentation **(as a PDF)** and the demo **(as a MP4 video)** in the repo.\n\nRemember, these deliverables are not just about completing the project but also about demonstrating a clear understanding of the underlying concepts and skills. It's important to take the time to understand each step, ask questions when necessary, and strive for continuous learning and improvement.\n\n### Deadline\n\nThe final project, including all deliverables, must be submitted no later than 23:59 on June 21, 2023. Please note that late submissions may not be accepted, so plan your work accordingly to meet this deadline."
        },
        {
          "id": "td-3",
          "metadata": {
            "permalink": "/blog/td-3",
            "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-05-23-TD3.mdx",
            "source": "@site/blog/2023-05-23-TD3.mdx",
            "title": "TD n°3 - Navigation & Hooks",
            "description": "Setup",
            "date": "2023-05-23T00:00:00.000Z",
            "formattedDate": "May 23, 2023",
            "tags": [],
            "readingTime": 4.995,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Youcef",
                "title": "Professeur",
                "url": "https://www.linkedin.com/in/youcefacheuk/",
                "imageURL": "https://media.licdn.com/dms/image/D4E03AQEsoGJhPBw2lg/profile-displayphoto-shrink_400_400/0/1673963094102?e=1686787200&v=beta&t=GPsLkfpeqiYFDDMVGbg7gjSazqhEA9oELnHJjvYdkjw",
                "key": "youcef"
              }
            ],
            "frontMatter": {
              "slug": "td-3",
              "title": "TD n°3 - Navigation & Hooks",
              "authors": [
                "youcef"
              ]
            },
            "prevItem": {
              "title": "Project",
              "permalink": "/blog/project"
            },
            "nextItem": {
              "title": "TD n°2 - Setup & Components - Solutions",
              "permalink": "/blog/td-2-solutions"
            }
          },
          "content": "### Setup\n\n1. Create a new Expo project\n2. Install eslint and prettier\n3. Run the app on your phone\n4. Try to run your app on a simulator\n\n### Exercise 1: Adding Navigation to an Expo App\n\nObjective: Implement navigation in an Expo app using React Navigation.\n\nInstructions:\n1. Create a new Expo app.\n2. Install React Navigation packages\n3. Create two screens: `HomeScreen` and `DetailsScreen`.\n4. Set up a Stack Navigator in your app to navigate between the screens.\n5. Configure the Stack Navigator to show the `HomeScreen` as the initial route.\n6. Add a button in the `HomeScreen` that navigates to the `DetailsScreen` when pressed.\n\n### Exercise 2: Creating Screens and Navigating Between Them\n\nObjective: Create multiple screens and navigate between them using React Navigation.\n\nInstructions:\n1. Add two more screens to your Expo app: `ProfileScreen` and `SettingsScreen`.\n2. Create a Bottom Tab Navigator to switch between the screens.\n3. Configure the Tab Navigator to show the `HomeScreen` as the initial route.\n4. Add buttons or icons to each screen that navigate to the corresponding screen when pressed.\n\n### Exercise 3: Passing Parameters to Routes and Configuring Header Bar\n\nObjective: Pass parameters to routes and configure the header bar in a React Native app.\n\nInstructions:\n1. Modify the `DetailsScreen` to receive a parameter when navigating to it.\n2. Pass a parameter from the `HomeScreen` to the `DetailsScreen` when navigating.\n3. Display the received parameter on the `DetailsScreen`.\n4. Configure the header bar of the `DetailsScreen` to display a title based on the received parameter.\n5. Add a header button to the `DetailsScreen` that performs a specific action when pressed.\n\n### Exercise 4: Counter App\n\nObjective: Create a simple counter application using React Native and the `useState` hook. The counter should display a number and have two buttons: one for incrementing the count and another for decrementing it.\n\nInstructions:\n1. Create a new Expo app or use the current one.\n2. Create a functional component called `CounterApp`.\n3. Import the necessary React Native components (`Text`, `View`, `Button`, etc.) from the `react-native` package.\n4. Inside the `CounterApp` component, use the `useState` hook to define a state variable called `count` and a function called `setCount` to update it.\n5. Render a `View` component that contains a `Text` component displaying the current value of `count`.\n6. Add two `Button` components below the `Text` component: one with the label \"+\" and another with the label \"-\".\n7. Attach `onPress` handlers to each button that call the appropriate function to increment or decrement the `count` state variable using `setCount`.\n8. Style the components as desired to improve the user interface.\n9. Test the application in the Expo client or simulator.\n\n### Exercise 5: Toggle Switch\n\nObjective: Create a toggle switch component using React Native and the `useState` hook. The toggle switch should have an initial state (on/off) and change its state when the user taps on it.\n\nInstructions:\n1. Create a new Expo app or use the current one.\n2. Define a functional component called `ToggleSwitch`.\n3. Import the necessary React Native components (`Text`, `View`, `TouchableOpacity`, etc.) from the `react-native` package.\n4. Inside the `ToggleSwitch` component, use the `useState` hook to define a state variable called `isOn` and a function called `setIsOn` to update it.\n5. Render a `View` component that represents the toggle switch.\n6. Inside the `View` component, render a `Text` component displaying the current state (`isOn`).\n7. Add a `TouchableOpacity` component inside the `View` component that wraps the entire toggle switch.\n8. Attach an `onPress` handler to the `TouchableOpacity` component that calls the `setIsOn` function to toggle the `isOn` state variable.\n9. Style the components to create a visual representation of the toggle switch, such as using different colors or icons to represent the different states.\n10. Test the toggle switch component in the Expo client or simulator.\n\n### Exercise 6: Random Quote Generator\n\nObjective: Create a simple random quote generator application using React Native and the useEffect hook. The application should fetch a random quote from an API and display it on the screen.\n\nInstructions:\n1. Create a functional component called QuoteGenerator.\n2. Import the necessary React Native components (Text, View, etc.) from the react-native package.\n3. Inside the QuoteGenerator component, use the useState hook to define a state variable called quote and a function called setQuote to update it.\n4. Use the useEffect hook to fetch a random quote from the API https://type.fit/api/quotes when the component mounts. You can use the fetch function or a library like Axios to make the API call.\n5. Update the quote state variable with the fetched quote.\n6. Render a View component that contains a Text component displaying the current value of the quote state variable.\n7. Style the components as desired to improve the user interface.\n8. Test the application in the Expo client or simulator.\n\n### Exercise 7: Real-time Weather Updates\n\nObjective: Create a real-time weather update application using React Native and the useEffect hook. The application should fetch weather data from an API and display it on the screen, updating the data at regular intervals.\n\nInstructions:\n\n1. Create a new Expo app or use the current one.\n2. Define a functional component called WeatherApp.\n3. Import the necessary React Native components (Text, View, etc.) from the react-native package.\n4. Inside the WeatherApp component, use the useState hook to define a state variable called weatherData and a function called setWeatherData to update it.\n5. Use the useEffect hook to fetch weather data from the API https://open-meteo.com/ when the component mounts and at regular intervals (e.g., every 5 minutes). You can use the fetch function or a library like Axios to make the API call.\n6. Update the weatherData state variable with the fetched weather data.\n7. Render a View component that contains Text components displaying the relevant weather information from the weatherData state variable (e.g., temperature, humidity, etc.).\n8. Style the components as desired to improve the user interface.\n9. Test the application in the Expo client or simulator."
        },
        {
          "id": "td-2-solutions",
          "metadata": {
            "permalink": "/blog/td-2-solutions",
            "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-05-11-TD2-solutions.mdx",
            "source": "@site/blog/2023-05-11-TD2-solutions.mdx",
            "title": "TD n°2 - Setup & Components - Solutions",
            "description": "Exercise 1:",
            "date": "2023-05-11T00:00:00.000Z",
            "formattedDate": "May 11, 2023",
            "tags": [],
            "readingTime": 4.365,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Youcef",
                "title": "Professeur",
                "url": "https://www.linkedin.com/in/youcefacheuk/",
                "imageURL": "https://media.licdn.com/dms/image/D4E03AQEsoGJhPBw2lg/profile-displayphoto-shrink_400_400/0/1673963094102?e=1686787200&v=beta&t=GPsLkfpeqiYFDDMVGbg7gjSazqhEA9oELnHJjvYdkjw",
                "key": "youcef"
              }
            ],
            "frontMatter": {
              "slug": "td-2-solutions",
              "title": "TD n°2 - Setup & Components - Solutions",
              "authors": [
                "youcef"
              ]
            },
            "prevItem": {
              "title": "TD n°3 - Navigation & Hooks",
              "permalink": "/blog/td-3"
            },
            "nextItem": {
              "title": "TD n°2 - Setup & Components",
              "permalink": "/blog/td-2"
            }
          },
          "content": "## Exercise 1:\n\nHere's an example of how you can achieve the desired layout using React Native and Expo:\n\n```javascript\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nconst Exercise1 = () => {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.header}>Here are my boxes</Text>\n      <View style={styles.boxContainer}>\n        <Rectangle color=\"#2aa198\" name=\"Cyan: #2aa198\" />\n        <Rectangle color=\"#268bd2\" name=\"Blue: #268bd2\" />\n        <Rectangle color=\"#d33682\" name=\"Magenta: #d33682\" />\n        <Rectangle color=\"#cb4b16\" name=\"Orange: #cb4b16\" />\n      </View>\n    </View>\n  );\n};\n\nconst Rectangle = ({ color, name }) => {\n  return (\n    <View style={[styles.rectangle, { backgroundColor: color }]}>\n      <Text style={styles.rectangleText}>{name}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    alignItems: 'center',\n  },\n  header: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n  boxContainer: {\n    justifyContent: 'center',\n  },\n  rectangle: {\n    width: 200,\n    height: 50,\n    marginBottom: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  rectangleText: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n});\n\nexport default Exercise1;\n```\n\nYou can use the `Exercise1` component in your main app file to display the header and rectangles with their respective colors and names.\n\n## Exercise 2:\n\nHere's an example of how you can create three centered squares with unique background colors using shared styles:\n\n```javascript\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nconst Exercise2 = () => {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.square, styles.square1]} />\n      <View style={[styles.square, styles.square2]} />\n      <View style={[styles.square, styles.square3]} />\n    </View>\n  );\n};\n\nconst sharedStyles = StyleSheet.create({\n  square: {\n    width: 100,\n    height: 100,\n    margin: 8,\n  },\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  square1: {\n    backgroundColor: 'red',\n  },\n  square2: {\n    backgroundColor: 'green',\n  },\n  square3: {\n    backgroundColor: 'blue',\n  },\n});\n\nexport default Exercise2;\n```\n\nYou can use the `Exercise2` component in your main app file to display the three centered squares with their respective colors.\n\n## Exercise 3:\n\nHere's an example of how you can create a profile screen layout using the flex property:\n\n```javascript\nimport React from 'react';\nimport { View, Image, Text, StyleSheet } from 'react-native';\n\nconst Exercise3 = () => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.profilePictureContainer}>\n        <Image\n          source={require('./profile-picture.jpg')}\n          style={styles.profilePicture}\n        />\n      </View>\n      <View style={styles.userInfoContainer}>\n        <Text style={styles.name}>John Doe</Text>\n        <Text style={styles.bio}>Software Developer</Text>\n      </View>\n      <View style={\n\nstyles.postsContainer}>\n        <Text style={styles.postsTitle}>Posts</Text>\n        <Text style={styles.post}>Post 1</Text>\n        <Text style={styles.post}>Post 2</Text>\n        <Text style={styles.post}>Post 3</Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n  },\n  profilePictureContainer: {\n    alignItems: 'center',\n    marginTop: 16,\n  },\n  profilePicture: {\n    width: 150,\n    height: 150,\n    borderRadius: 75,\n  },\n  userInfoContainer: {\n    alignItems: 'center',\n    marginTop: 16,\n  },\n  name: {\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n  bio: {\n    fontSize: 16,\n    marginTop: 8,\n  },\n  postsContainer: {\n    flex: 1,\n    marginTop: 16,\n  },\n  postsTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  post: {\n    fontSize: 16,\n    marginBottom: 4,\n  },\n});\n\nexport default Exercise3;\n```\n\nYou can use the `Exercise3` component in your main app file to display the profile screen layout.\n\n## Exercise 4:\n\nHere's an example of how you can create a contact list using the FlatList component:\n\n```javascript\nimport React from 'react';\nimport { View, Text, FlatList, StyleSheet } from 'react-native';\n\nconst ContactScreen = () => {\n  const contacts = [\n    { id: '1', name: 'John Doe', phoneNumber: '123-456-7890' },\n    { id: '2', name: 'Jane Smith', phoneNumber: '987-654-3210' },\n    { id: '3', name: 'Alice Johnson', phoneNumber: '555-123-4567' },\n  ];\n\n  const renderContactItem = ({ item }) => (\n    <View style={styles.item}>\n      <Text style={styles.name}>{item.name}</Text>\n      <Text style={styles.phoneNumber}>{item.phoneNumber}</Text>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={contacts}\n        renderItem={renderContactItem}\n        keyExtractor={(item) => item.id}\n        ItemSeparatorComponent={() => <View style={styles.separator} />}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n  },\n  item: {\n    paddingVertical: 8,\n  },\n  name: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  phoneNumber: {\n    fontSize: 14,\n    color: '#666',\n  },\n  separator: {\n    height: 1,\n    backgroundColor: '#ccc',\n  },\n});\n\nexport default ContactScreen;\n```\n\nYou can use the `ContactScreen` component in your main app file to display the contact list using the FlatList component.\n\n## Exercise 5:\n\nHere's an example of how you can group contacts by the first letter of their names using the SectionList component:\n\n```javascript\nimport React from 'react';\nimport { View, Text, SectionList, StyleSheet } from 'react-native';\n\nconst SectionContactScreen = () => {\n  const contacts = [\n    { id: '1', name: 'John Doe', phoneNumber: '123-456-7890' },\n    { id: '2', name: 'Jane Smith', phoneNumber: '987-654-3210' },\n   \n\n { id: '3', name: 'Alice Johnson', phoneNumber: '555-123-4567' },\n    // ...more contacts\n  ];\n\n  const contactsBySection = contacts.reduce((sections, contact) => {\n    const firstLetter = contact.name.charAt(0).toUpperCase();\n    if (!sections[firstLetter]) {\n      sections[firstLetter] = { title: firstLetter, data: [] };\n    }\n    sections[firstLetter].data.push(contact);\n    return sections;\n  }, {});\n\n  const sections = Object.values(contactsBySection);\n\n  const renderContactItem = ({ item }) => (\n    <View style={styles.item}>\n      <Text style={styles.name}>{item.name}</Text>\n      <Text style={styles.phoneNumber}>{item.phoneNumber}</Text>\n    </View>\n  );\n\n  const renderSectionHeader = ({ section }) => (\n    <Text style={styles.sectionHeader}>{section.title}</Text>\n  );\n\n  return (\n    <View style={styles.container}>\n      <SectionList\n        sections={sections}\n        renderItem={renderContactItem}\n        renderSectionHeader={renderSectionHeader}\n        keyExtractor={(item) => item.id}\n        ItemSeparatorComponent={() => <View style={styles.separator} />}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n  },\n  item: {\n    paddingVertical: 8,\n  },\n  name: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  phoneNumber: {\n    fontSize: 14,\n    color: '#666',\n  },\n  sectionHeader: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    backgroundColor: '#f5f5f5',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  separator: {\n    height: 1,\n    backgroundColor: '#ccc',\n  },\n});\n\nexport default SectionContactScreen;\n```\n\nYou can use the `SectionContactScreen` component in your main app file to display the contact list grouped by the first letter of their names using the SectionList component."
        },
        {
          "id": "td-2",
          "metadata": {
            "permalink": "/blog/td-2",
            "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-05-11-TD2.mdx",
            "source": "@site/blog/2023-05-11-TD2.mdx",
            "title": "TD n°2 - Setup & Components",
            "description": "1. Create a new Expo project",
            "date": "2023-05-11T00:00:00.000Z",
            "formattedDate": "May 11, 2023",
            "tags": [],
            "readingTime": 2.25,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Youcef",
                "title": "Professeur",
                "url": "https://www.linkedin.com/in/youcefacheuk/",
                "imageURL": "https://media.licdn.com/dms/image/D4E03AQEsoGJhPBw2lg/profile-displayphoto-shrink_400_400/0/1673963094102?e=1686787200&v=beta&t=GPsLkfpeqiYFDDMVGbg7gjSazqhEA9oELnHJjvYdkjw",
                "key": "youcef"
              }
            ],
            "frontMatter": {
              "slug": "td-2",
              "title": "TD n°2 - Setup & Components",
              "authors": [
                "youcef"
              ]
            },
            "prevItem": {
              "title": "TD n°2 - Setup & Components - Solutions",
              "permalink": "/blog/td-2-solutions"
            },
            "nextItem": {
              "title": "TD n°1 - Les bases de JavaScript",
              "permalink": "/blog/td-1"
            }
          },
          "content": "# Setup\n\n1. Create a new Expo project\n2. Install eslint and prettier\n3. Run the app on your phone\n4. Try to run your app on a simulator\n\n# Exercise 1\n\nCreate a header with a text saying \"Here are my boxes\". The font size should be 24 and the font weight should be bold.\nBelow that, create a column of 4 rectangles vertically centered. Each rectangle should have a different color.\nInside the rectangle, please write the name of the color.\n\nFor example:\n```\nCyan: #2aa198\nBlue: #268bd2\nMagenta: #d33682\nOrange: #cb4b16\n```\n\n# Exercise 2\n\nCreate 3 squares that are vertically and horizontally centered. Each square should have a unique background color but all shared styles should only be defined once.\n\n# Exercise 3\n\nIn this exercise, you'll be using the flex property to create a layout for a profile screen. The screen will have a profile picture at the top, followed by the user's name and a short bio, and then a section for their posts.\nUse the Image component for the profile picture, and Text components for the user's name, bio, and posts.\nCreate a new style using StyleSheet and apply it to your components. Use the flex property to make sure that the posts section takes up the majority of the screen, while the profile picture, name, and bio take up less space.\n\n# Exercise 4\n\nIn this exercise, you will create a contact list using the FlatList component.\n\nCreate a new screen in your Expo project, let's call it ContactScreen.\nDefine an array of contact objects, each with a photo, a name and phoneNumber property.\nRender a FlatList that maps each of these contacts into a Text component displaying the contact's name and phone number.\nAdd the keyExtractor prop to the FlatList that returns a unique key string for each item.\nUse the ItemSeparatorComponent prop to render a separator between each item in the list.\n\n# Exercise 5\n\nFor this exercise, you'll modify the contact list from Exercise 1 to group the contacts by the first letter of their names using the SectionList component.\n\nCreate a new screen in your Expo project, let's call it SectionContactScreen.\nConvert your contacts array into a sectioned format that SectionList requires. It should be an array of objects, each with a title property (the first letter of the names) and a data property (an array of contacts with that initial).\nRender a SectionList. The renderItem prop should be a function that renders a Text component for each contact, and the renderSectionHeader prop should be a function that renders a Text component for each section title.\nAs in Exercise 1, include a keyExtractor prop and an ItemSeparatorComponent prop."
        },
        {
          "id": "td-1",
          "metadata": {
            "permalink": "/blog/td-1",
            "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-04-11-TD1.mdx",
            "source": "@site/blog/2023-04-11-TD1.mdx",
            "title": "TD n°1 - Les bases de JavaScript",
            "description": "FreeCodeCamp",
            "date": "2023-04-11T00:00:00.000Z",
            "formattedDate": "April 11, 2023",
            "tags": [],
            "readingTime": 0.265,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Youcef",
                "title": "Professeur",
                "url": "https://www.linkedin.com/in/youcefacheuk/",
                "imageURL": "https://media.licdn.com/dms/image/D4E03AQEsoGJhPBw2lg/profile-displayphoto-shrink_400_400/0/1673963094102?e=1686787200&v=beta&t=GPsLkfpeqiYFDDMVGbg7gjSazqhEA9oELnHJjvYdkjw",
                "key": "youcef"
              }
            ],
            "frontMatter": {
              "slug": "td-1",
              "title": "TD n°1 - Les bases de JavaScript",
              "authors": [
                "youcef"
              ]
            },
            "prevItem": {
              "title": "TD n°2 - Setup & Components",
              "permalink": "/blog/td-2"
            }
          },
          "content": "<img alt=\"JavaScript\" src=\"/img/javascript.png\" style={{width:\"50%\"}} />\n\n## FreeCodeCamp\n\nRendez-vous sur [FreeCodeCamp](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/) et créez votre compte.\n\n## Tutoriel JavaScript\n\nL'objectif est de maîtriser :\n- Basic JavaScript => <b>https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/</b>\n- ES6 => <b>https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/</b>\n\n## Quiz\n\nLors du prochain cours, le 10/05/2023, vous aurez un quiz de 20 minutes sur JavaScript afin de valider vos connaissances."
        }
      ],
      "blogListPaginated": [
        {
          "items": [
            "td-4",
            "project",
            "td-3",
            "td-2-solutions",
            "td-2",
            "td-1"
          ],
          "metadata": {
            "permalink": "/blog",
            "page": 1,
            "postsPerPage": 10,
            "totalPages": 1,
            "totalCount": 6,
            "blogDescription": "Blog",
            "blogTitle": "Blog"
          }
        }
      ],
      "blogTags": {},
      "blogTagsListPath": "/blog/tags"
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "jsx",
        "permalink": "/",
        "source": "@site/src/pages/index.tsx"
      },
      {
        "type": "mdx",
        "permalink": "/markdown-page",
        "source": "@site/src/pages/markdown-page.md",
        "title": "Markdown page example",
        "description": "You don't need React to write simple standalone pages.",
        "frontMatter": {
          "title": "Markdown page example"
        }
      }
    ]
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-theme-classic": {},
  "docusaurus-bootstrap-plugin": {},
  "docusaurus-mdx-fallback-plugin": {}
}